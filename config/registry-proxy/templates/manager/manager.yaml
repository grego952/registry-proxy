apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry-proxy-controller-manager
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "chart.labels" . | nindent 4 }}
    control-plane: controller-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "chart.selectorLabels" . | nindent 6 }}
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        {{- include "chart.labels" . | nindent 8 }}
        control-plane: controller-manager
        {{- if and .Values.controllerManager.pod .Values.controllerManager.pod.labels }}
        {{- range $key, $value := .Values.controllerManager.pod.labels }}
        {{ $key }}: {{ $value }}
        {{- end }}
        {{- end }}
    spec:
      containers:
        - name: manager
          args:
            {{- range .Values.controllerManager.container.args }}
            - {{ . }}
            {{- end }}
          command:
            - /manager
          image: {{ .Values.controllerManager.container.image.repository }}:{{ .Values.controllerManager.container.image.tag }}
          imagePullPolicy: IfNotPresent
          {{- if .Values.controllerManager.container.env }}
          env:
            {{- range $key, $value := .Values.controllerManager.container.env }}
            - name: {{ $key }}
              value: {{ $value }}
            {{- end }}
          {{- end }}
          livenessProbe:
            initialDelaySeconds: 15
            periodSeconds: 20
            httpGet:
              path: /healthz
              port: 8081
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            httpGet:
              path: /readyz
              port: 8081
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 1000
            runAsGroup: 1000
            runAsNonRoot: true
            capabilities:
              drop:
                - "ALL"
          {{- if and .Values.certmanager.enable (or .Values.webhook.enable .Values.metrics.enable) }}
          volumeMounts:
            {{- if and .Values.metrics.enable .Values.certmanager.enable }}
            - name: metrics-certs
              mountPath: /tmp/k8s-metrics-server/metrics-certs
              readOnly: true
            {{- end }}
          {{- end }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: {{ .Values.controllerManager.serviceAccountName }}
      terminationGracePeriodSeconds: 10
      {{- if and .Values.certmanager.enable (or .Values.webhook.enable .Values.metrics.enable) }}
      volumes:
        {{- if and .Values.metrics.enable .Values.certmanager.enable }}
        - name: metrics-certs
          secret:
            secretName: metrics-server-cert
        {{- end }}
      {{- end }}
